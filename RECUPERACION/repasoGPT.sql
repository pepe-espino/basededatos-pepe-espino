-----------------------
------ EJ1


DECLARE
	V_SAL NUMBER(10);
	V_EMPNO NUMBER(10);
BEGIN
	V_EMPNO:=10;

	SELECT E.SAL 
	INTO V_SAL
	FROM EMP e
	WHERE E.EMPNO = V_EMPNO;

	DBMS_OUTPUT.PUT_LINE('EL EMPLEADO CON NÚMERO '|| V_EMPNO || ' TIENE UN SALARIO DE '|| V_SAL || ' EUROS.');
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('EL EMPLEADO NO EXISTE.');
	
END;


-----------------------
------ EJ2

CREATE OR REPLACE PROCEDURE NOMBRE_EMP (P_EMPNO IN EMP.EMPNO%TYPE, P_ENAME OUT EMP.ENAME%TYPE)
IS
BEGIN
	
	SELECT E.ENAME
	INTO P_ENAME
	FROM EMP e
	WHERE E.EMPNO = P_EMPNO;
	
	DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL EMPLEADO ES '|| P_ENAME);
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('EL EMPLEADO NO EXISTE');
		P_ENAME := NULL;
	
END;

DECLARE
	V_ENAME EMP.ENAME%TYPE;
BEGIN
	NOMBRE_EMP(10, V_ENAME);
END;


-----------------------
------ EJ3


CREATE OR REPLACE FUNCTION NOMBRE_EMPLEADO (
   P_EMPNO EMP.EMPNO%TYPE
) RETURN EMP.ENAME%TYPE
IS
   V_ENAME EMP.ENAME%TYPE;
BEGIN
   SELECT E.ENAME
   INTO V_ENAME
   FROM EMP e
   WHERE E.EMPNO = P_EMPNO;

   RETURN V_ENAME;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('EL EMPLEADO NO EXISTE.');
      RETURN NULL;
END;

DECLARE
   V_NOMBRE EMP.ENAME%TYPE;
BEGIN
   V_NOMBRE := NOMBRE_EMPLEADO(7369);
   IF V_NOMBRE IS NOT NULL THEN
      DBMS_OUTPUT.PUT_LINE('FUNCION DEVOLVIÓ: ' || V_NOMBRE);
   END IF;
END;


-----------------------
------ EJ4

CREATE OR REPLACE TRIGGER AUDITORIA_BONUS
AFTER INSERT OR UPDATE OR DELETE ON BONUS
BEGIN
	
	IF INSERTING THEN
		DBMS_OUTPUT.PUT_LINE('SE HAN INSERTADO DATOS EN LA TABLA BONUS.');
	ELSIF UPDATING THEN
		DBMS_OUTPUT.PUT_LINE('SE HAN ACTUALIZADO DATOS EN LA TABLA BONUS.');
	ELSE
		DBMS_OUTPUT.PUT_LINE('SE HAN BORRADO DATOS EN LA TABLA BONUS.');	
	END IF;
END;

-----------------------
------ EJ5


CREATE OR REPLACE TRIGGER T_PROTEGER_JEFES
BEFORE DELETE ON EMP
FOR EACH ROW
BEGIN
	
	IF :OLD.JOB = 'MANAGER' THEN
		RAISE_APPLICATION_ERROR(-20009, 'UN MANAGER NO PUEDE SER ELIMINADO DE LA BASE DE DATOS.');
	END IF;
	
END;

CREATE TABLE AUDITORIA_DE_EMPLEADOS
(
	ID NUMBER(10),
	EMPNO VARCHAR2(10),
	OLD_SAL NUMBER(7,2),
	NEW_SAL NUMBER(7,2),
	FECHA DATE,
	CONSTRAINT PK_AUDITORIA PRIMARY KEY(ID)
);

CREATE OR REPLACE TRIGGER T_AUDITAR_CAMBIOS
AFTER UPDATE OF SAL ON EMP
FOR EACH ROW
BEGIN
	
	INSERT INTO AUDITORIA_DE_EMPLEADOS VALUES(SQ_AUDIT.NEXTVAL, :OLD.EMPNO, :NEW.SAL, :NEW.SAL, SYSDATE);
	
END;

UPDATE EMP SET SAL = SAL + 100 WHERE EMPNO = 9991;

SELECT * FROM AUDITORIA_DE_EMPLEADOS;
SELECT * FROM EMP;


-----------------------
------ EJ6


CREATE OR REPLACE PACKAGE PAQUETE_SALARIOS IS
	PROCEDURE MOSTRAR_SALARIO(P_EMPNO IN EMP.EMPNO%TYPE);
	FUNCTION DOBLE_SALARIO(P_EMPNO IN EMP.EMPNO%TYPE) RETURN EMP.SAL%TYPE;
END PAQUETE_SALARIOS;

CREATE OR REPLACE PACKAGE BODY PAQUETE_SALARIOS IS

	PROCEDURE MOSTRAR_SALARIO (P_EMPNO IN EMP.EMPNO%TYPE) 
	IS
		V_SAL EMP.SAL%TYPE;
	BEGIN
		
		SELECT E.SAL 
		INTO V_SAL
		FROM EMP e
		WHERE E.EMPNO = P_EMPNO;
		
		DBMS_OUTPUT.PUT_LINE('EL SALARIO DEL EMPLEADO CON ID '|| P_EMPNO || ' ES '||V_SAL);
		
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('EMPLEADO NO ENCONTRADO.');		
	END;
	
	FUNCTION DOBLE_SALARIO(P_EMPNO IN EMP.EMPNO%TYPE)
	RETURN EMP.SAL%TYPE
	IS
		V_SAL EMP.SAL%TYPE;
	BEGIN
		
		SELECT E.SAL
		INTO V_SAL
		FROM EMP e
		WHERE E.EMPNO = P_EMPNO;
		
		RETURN V_SAL*2;
		
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('EMPLEADO NO ENCONTRADO.');
			RETURN NULL;
	END;
	
END PAQUETE_SALARIOS;

BEGIN
   PAQUETE_SALARIOS.MOSTRAR_SALARIO(7369);
   DBMS_OUTPUT.PUT_LINE('DOBLE SALARIO: ' || PAQUETE_SALARIOS.DOBLE_SALARIO(7369));
END;



-----------------------
------ EJ7


DECLARE
	CURSOR C_EMP IS
	SELECT E.ENAME, E.JOB FROM EMP e
	WHERE E.DEPTNO = 30;

	V_EMP C_EMP%ROWTYPE;
BEGIN
	
	FOR C IN C_EMP LOOP
		DBMS_OUTPUT.PUT_LINE(C.ENAME || ' ES ' || C.JOB);
	END LOOP;
	
	OPEN C_EMP;
	LOOP
		
		FETCH C_EMP INTO V_EMP;
		EXIT WHEN C_EMP%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE(V_EMP.ENAME || ' ES ' || V_EMP.JOB);
	END LOOP;
	CLOSE C_EMP;

END;

-----------------------
------ EJ8


DECLARE 
	CURSOR C_EMP_SAL_MAYOR(P_VALOR NUMBER) IS
	SELECT * FROM EMP e 
	WHERE E.SAL > P_VALOR;

	V_EMP C_EMP_SAL_MAYOR%ROWTYPE;
BEGIN
	
	OPEN C_EMP_SAL_MAYOR(1500);
	LOOP
	FETCH C_EMP_SAL_MAYOR INTO V_EMP;
	EXIT WHEN C_EMP_SAL_MAYOR%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE(V_EMP.ENAME || ' - '||V_EMP.SAL || ' EUROS - EMPNO :'||V_EMP.EMPNO);
	END LOOP;
	CLOSE C_EMP_SAL_MAYOR;
END;


-----------------------
------ EJ9



DECLARE 
	
	CURSOR C_JOBS IS
	SELECT DISTINCT e.JOB
	FROM EMP e;
	
	CURSOR C_EMP_JOB(P_JOB EMP.JOB%TYPE) IS
	SELECT E.EMPNO, E.ENAME
	FROM EMP e
	WHERE E.JOB = P_JOB;
	
	V_JOBS C_JOBS%ROWTYPE;
	V_EMPS C_EMP_JOB%ROWTYPE;

BEGIN

	OPEN C_JOBS;
	LOOP
		
		FETCH C_JOBS INTO V_JOBS;
		EXIT WHEN C_JOBS%NOTFOUND;		
		
		DBMS_OUTPUT.PUT_LINE('-----------------------------------------');
		DBMS_OUTPUT.PUT_LINE('-------------' ||V_JOBS.JOB|| '------------');
		DBMS_OUTPUT.PUT_LINE('-----------------------------------------');
		
		OPEN C_EMP_JOB(V_JOBS.JOB);
		LOOP
			
			FETCH C_EMP_JOB INTO V_EMPS;
			EXIT WHEN C_EMP_JOB%NOTFOUND;
			
			DBMS_OUTPUT.PUT_LINE('EMPNO: '|| V_EMPS.EMPNO || ' - NOMBRE: '||V_EMPS.ENAME);
			
		END LOOP;
		CLOSE C_EMP_JOB;
		
	END LOOP;
	CLOSE C_JOBS;
	
EXCEPTION
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('ERROR.');	
END;



































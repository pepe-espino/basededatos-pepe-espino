-- TABLA DEPARTAMENTOS
CREATE TABLE DEPARTAMENTOS (
    ID_DEPARTAMENTO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50)
);

-- TABLA EMPLEADOS
CREATE TABLE EMPLEADOS (
    ID_EMPLEADO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    SALARIO NUMBER(8,2),
    ID_DEPARTAMENTO NUMBER,
    FECHA_ALTA DATE,
    CONSTRAINT FK_DEP FOREIGN KEY (ID_DEPARTAMENTO)
        REFERENCES DEPARTAMENTOS(ID_DEPARTAMENTO)
);

-- TABLA LOG_CAMBIOS
CREATE TABLE LOG_CAMBIOS (
    ID_LOG NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    OPERACION VARCHAR2(20),
    ID_EMPLEADO NUMBER,
    FECHA DATE,
    USUARIO VARCHAR2(50)
);

-- INSERTS DEPARTAMENTOS
INSERT INTO DEPARTAMENTOS VALUES (10, 'INFORMATICA');
INSERT INTO DEPARTAMENTOS VALUES (20, 'RRHH');
INSERT INTO DEPARTAMENTOS VALUES (30, 'VENTAS');

-- INSERTS EMPLEADOS
INSERT INTO EMPLEADOS VALUES (1, 'Ana', 2200, 10, TO_DATE('2022-05-01','YYYY-MM-DD'));
INSERT INTO EMPLEADOS VALUES (2, 'Luis', 1800, 10, TO_DATE('2023-02-10','YYYY-MM-DD'));
INSERT INTO EMPLEADOS VALUES (3, 'Sonia', 2400, 20, TO_DATE('2021-09-15','YYYY-MM-DD'));
INSERT INTO EMPLEADOS VALUES (4, 'Pedro', 1900, 30, TO_DATE('2024-01-01','YYYY-MM-DD'));



----------------------------------------------------
----------------- EJERCICIO 2 ----------------------

DECLARE
	V_EMPLEADOS NUMBER(6);
BEGIN
	
	SELECT COUNT(*) INTO V_EMPLEADOS
	FROM EMPLEADOS e
	JOIN DEPARTAMENTOS d ON D.ID_DEPARTAMENTO = E.ID_DEPARTAMENTO
	WHERE D.NOMBRE = 'INFORMATICA';
	
	DBMS_OUTPUT.PUT_LINE(V_EMPLEADOS);
	
END;


----------------------------------------------------
----------------- EJERCICIO 3 ----------------------


CREATE OR REPLACE FUNCTION SALARIO_TOTAL_DEPTO (P_ID_DEPT IN DEPARTAMENTOS.ID_DEPARTAMENTO%TYPE) 
RETURN NUMBER
IS
	CURSOR C_EMPS(P_DEP DEPARTAMENTOS.ID_DEPARTAMENTO%TYPE) IS
	SELECT E.SALARIO FROM EMPLEADOS e
	WHERE E.ID_DEPARTAMENTO = P_DEP;

	V_TOTAL_SAL NUMBER(10);
BEGIN
	
	V_TOTAL_SAL:=0;
	
	FOR C IN C_EMPS(P_ID_DEPT) LOOP
		
		V_TOTAL_SAL := V_TOTAL_SAL + C.SALARIO;
		
	END LOOP;
	
	RETURN V_TOTAL_SAL;

EXCEPTION
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('ERROR AL COMPROBAR EL SALARIO TOTAL DE LOS EMPLEADOS DEL DEPARTAMENTO CON ID: ' || P_ID_DEPT);
	
END;

--PRUEBA
SELECT SALARIO_TOTAL_DEPTO(10) FROM DUAL;



----------------------------------------------------
----------------- EJERCICIO 4 ----------------------

CREATE SEQUENCE SQ_LOG
START WITH 1
INCREMENT BY 1;


CREATE OR REPLACE PROCEDURE CAMBIAR_DEPARTAMENTO(P_ID_EMP IN EMPLEADOS.ID_EMPLEADO%TYPE, P_NUEVO_DEPT_ID IN DEPARTAMENTOS.ID_DEPARTAMENTO%TYPE)
IS

BEGIN

	UPDATE EMPLEADOS SET ID_DEPARTAMENTO = P_NUEVO_DEPT_ID
	WHERE ID_EMPLEADO = P_ID_EMP;
	
	INSERT INTO LOG_CAMBIOS VALUES(SQ_LOG.NEXTVAL, 'CAMBIO_DEPTO', P_ID_EMP, SYSDATE, USER);
	
END;

--PRUEBAS

--COMPROBAMOS QUE ESTA EN ID_DEPARTAMENTO 10 EL EMPLEADO CON ID 2
SELECT * FROM EMPLEADOS;

--EJECUTAMOS EL PROCEDURE EN UN BLOQUE ANONIMO
BEGIN
	CAMBIAR_DEPARTAMENTO(2, 30);
END;

--VOLVEMOS A COMPROBAR Y EL DEPARTAMENTO DEBE HABER CAMBIADO A 30 EL EMPLEADO CON ID 2
SELECT * FROM EMPLEADOS;



----------------------------------------------------
----------------- EJERCICIO 5 ----------------------


CREATE OR REPLACE TRIGGER T_NO_BAJAR_SUELDO
BEFORE UPDATE OF SALARIO ON EMPLEADOS
FOR EACH ROW
BEGIN
	
	IF :NEW.SALARIO < :OLD.SALARIO THEN
		RAISE_APPLICATION_ERROR(-20001, 'NO SE PUEDE BAJAR EL SALARIO');
	END IF;
	
END;


--PRUEBA

--TRATO DE ACTUALIZAR EL SALARIO DEL EMPLEADO CON ID 2 PERO NO ME DEJA PORQUE SE LO HE BAJADO
UPDATE EMPLEADOS SET SALARIO = 1000
WHERE ID_EMPLEADO = 2;

--EN CAMBIO SI SE LO SUBIMOS SI NOS LO PERMITE
UPDATE EMPLEADOS SET SALARIO = 1900
WHERE ID_EMPLEADO = 2;



----------------------------------------------------
----------------- EJERCICIO 6 ----------------------


--CON BUCLE FOR
DECLARE
	
	CURSOR C_EMPS IS
	SELECT E.NOMBRE, E.SALARIO
	FROM EMPLEADOS e
	WHERE ID_DEPARTAMENTO = 10;
	
	V_SAL EMPLEADOS.SALARIO%TYPE;

BEGIN
	
	FOR C IN C_EMPS LOOP
		
		V_SAL := C.SALARIO + C.SALARIO*0.10;
		
		DBMS_OUTPUT.PUT_LINE(UPPER(C.NOMBRE) || ' TIENE UN SALARIO DE '|| V_SAL ||' EUROS');
		
	END LOOP;
	
END;


--CON FETCH 
DECLARE
	
	CURSOR C_EMPS IS
	SELECT E.NOMBRE, E.SALARIO
	FROM EMPLEADOS e
	WHERE ID_DEPARTAMENTO = 10;
	
	V_EMPS C_EMPS%ROWTYPE;
	V_SAL EMPLEADOS.SALARIO%TYPE;

BEGIN
	
	OPEN C_EMPS;
	LOOP
		
		FETCH C_EMPS INTO V_EMPS;
		EXIT WHEN C_EMPS%NOTFOUND;
		
		V_SAL := V_EMPS.SALARIO + V_EMPS.SALARIO*0.10;
		
		DBMS_OUTPUT.PUT_LINE(UPPER(V_EMPS.NOMBRE) || ' TIENE UN SALARIO DE '|| V_SAL ||' EUROS');
		
	END LOOP;
	CLOSE C_EMPS;
	
END;


----------------------------------------------------
----------------- EJERCICIO 7 ----------------------

CREATE OR REPLACE PROCEDURE AUMENTAR_SALARIO(P_IDEMP IN EMPLEADOS.ID_EMPLEADO%TYPE, P_PORCENTAJE IN NUMBER)
IS
BEGIN
	
	IF P_PORCENTAJE > 100 OR P_PORCENTAJE < 0 THEN
		RAISE_APPLICATION_ERROR(-20002, 'EL PORCENTAJE NO PUEDE SER MAYOR AL 100% O MENOR A 0');
	END IF;
	
	UPDATE EMPLEADOS SET SALARIO = SALARIO+SALARIO*(P_PORCENTAJE/100)
	WHERE ID_EMPLEADO = P_IDEMP;
	
	IF SQL%ROWCOUNT = 0 THEN
		RAISE NO_DATA_FOUND;
	END IF;
END;

--PRUEBAS

BEGIN
	AUMENTAR_SALARIO(2, 10);
END;

SELECT * FROM EMPLEADOS;






















































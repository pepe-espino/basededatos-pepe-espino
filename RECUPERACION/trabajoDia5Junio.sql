--------------------------------------------------------
----------------------EJERCICIO1------------------------

CREATE TABLE PEDIDOS
(
	ID_PEDIDO NUMBER(10),
	FECHA_PEDIDO DATE,
	TOTAL_PEDIDO NUMBER(10,2),
	CONSTRAINT PK_PEDIDOS PRIMARY KEY(ID_PEDIDO)
);

CREATE TABLE PRODUCTOS
(
	ID_PRODUCTO NUMBER(10),
	NOMBRE VARCHAR2(50),
	PRECIO NUMBER(10,2),
	STOCK NUMBER(10),
	CONSTRAINT PK_PRODUCTOS PRIMARY KEY(ID_PRODUCTO)
);

CREATE TABLE LINEAS_PEDIDO
(
	ID_LINEA NUMBER(10),
	ID_PEDIDO NUMBER(10),
	ID_PRODUCTO NUMBER(10),
	CANTIDAD NUMBER(10),
	CONSTRAINT PK_LINEA PRIMARY KEY(ID_LINEA),
	CONSTRAINT FK1_LINEA FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO),
	CONSTRAINT FK2_LINEA FOREIGN KEY(ID_PEDIDO) REFERENCES PEDIDOS(ID_PEDIDO)
);

CREATE SEQUENCE SQ_PED
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SQ_PROD
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SQ_LIN
START WITH 1
INCREMENT BY 1;


INSERT INTO PEDIDOS p VALUES (SQ_PED.NEXTVAL, SYSDATE, 50);
INSERT INTO PEDIDOS p VALUES (SQ_PED.NEXTVAL, SYSDATE, 35.65);
INSERT INTO PEDIDOS p VALUES (SQ_PED.NEXTVAL, SYSDATE, 79.99);

INSERT INTO PRODUCTOS p VALUES (SQ_PROD.NEXTVAL, 'ORDENADOR', 500.50, 15);
INSERT INTO PRODUCTOS p VALUES (SQ_PROD.NEXTVAL, 'MESA', 62.75, 25);
INSERT INTO PRODUCTOS p VALUES (SQ_PROD.NEXTVAL, 'RATÓN', 29.99, 56);
INSERT INTO PRODUCTOS p VALUES (SQ_PROD.NEXTVAL, 'TECLADO', 72, 60);
INSERT INTO PRODUCTOS p VALUES (SQ_PROD.NEXTVAL, 'MONITOR', 124.99, 18);

INSERT INTO LINEAS_PEDIDO lp VALUES(SQ_LIN.NEXTVAL, 1, 2, 4);
INSERT INTO LINEAS_PEDIDO lp VALUES(SQ_LIN.NEXTVAL, 3, 3, 1);


DELETE FROM PEDIDOS p ;
DELETE FROM PRODUCTOS ;
DELETE FROM LINEAS_PEDIDO lp;

SELECT * FROM PEDIDOS p ;
SELECT * FROM PRODUCTOS p ;
SELECT * FROM LINEAS_PEDIDO lp ;


CREATE OR REPLACE PROCEDURE PROCESAR_PEDIDO(P_ID_PEDIDO NUMBER)
IS 
	CURSOR C_PEDIDOS (P_PEDIDO NUMBER) IS 
	SELECT * FROM LINEAS_PEDIDO lp
	WHERE lp.ID_PEDIDO = P_PEDIDO;

	V_STOCK NUMBER(10);
BEGIN
	
	FOR V_FILA IN C_PEDIDOS(P_ID_PEDIDO) LOOP
		
		SELECT P.STOCK INTO V_STOCK FROM PRODUCTOS p 
		WHERE P.ID_PRODUCTO = V_FILA.ID_PRODUCTO;
		
		IF V_FILA.CANTIDAD < V_STOCK THEN
			UPDATE PRODUCTOS P SET P.STOCK = V_STOCK - V_FILA.CANTIDAD 
			WHERE P.ID_PRODUCTO = V_FILA.ID_PRODUCTO;
		ELSE
			RAISE_APPLICATION_ERROR(-20001, 'Stock insuficiente para el producto con ID: '||V_FILA.ID_PRODUCTO);
		END IF;
	END LOOP;
	
END;


--CASO DE PRUEBA 1--

--INSERT INTO PEDIDOS p VALUES(10, SYSDATE, 100);
--INSERT INTO LINEAS_PEDIDO lp VALUES (10, 10, 8, 10);

SELECT * FROM PRODUCTOS p WHERE p.ID_PRODUCTO = 8; 

BEGIN
	PROCESAR_PEDIDO(10);
END;

SELECT * FROM PRODUCTOS p WHERE P.ID_PRODUCTO = 8; --El producto con id 8 debe restar 10 de su cantidad--

--CASO DE PRUEBA 2 , SE INTRODUCE UN PEDIDO QUE NO EXISTE--

BEGIN
	PROCESAR_PEDIDO(54);
END;

--CASO DE PRUEBA 3 CANTIDAD MAS QUE STOCK--

--INSERT INTO LINEAS_PEDIDO lp VALUES(2, 2, 4, 100);


--DEBE SALTAR LA EXCEPCION YA QUE SE QUIERE OBTENER 100 DE UN PRODUCTO QUE SU STOCK ES MENOR
BEGIN
	PROCESAR_PEDIDO(2);
END;


----------------------------------------------
--------------EJERCICIO 2---------------------

-- creación de la tabla log_auditoria

CREATE TABLE LOG_AUDITORIA
(
	ID_LOG NUMBER(10),
	TABLA_AFECTADA VARCHAR2(25),
	OPERACION VARCHAR2(25),
	FECHA_EVENTO DATE,
	ID_PEDIDO NUMBER(10),
	CONSTRAINT PK_LOG_AUDITORIA PRIMARY KEY(ID_LOG)
);

CREATE SEQUENCE sq_log
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER RECUPERACIONEXAMEN.AUDITAR_PEDIDOS
AFTER INSERT OR DELETE OR UPDATE ON PEDIDOS
FOR EACH ROW 
BEGIN 
	
	IF INSERTING THEN
		
		INSERT INTO LOG_AUDITORIA la VALUES(sq_log.NEXTVAL, 'PEDIDOS', 'INSERT', SYSDATE, :NEW.ID_PEDIDO);
	
	ELSIF UPDATING THEN
	
		UPDATE LOG_AUDITORIA SET OPERACION = 'UPDATE' WHERE ID_PEDIDO = :NEW.ID_PEDIDO;
		
	ELSE
	
		UPDATE LOG_AUDITORIA SET OPERACION = 'DELETE' WHERE ID_PEDIDO = :OLD.ID_PEDIDO;
		
	END IF;
	
END;


INSERT INTO PEDIDOS p VALUES (SQ_PED.NEXTVAL, SYSDATE, 134.99);
INSERT INTO PEDIDOS p VALUES (SQ_PED.NEXTVAL, SYSDATE, 4.55);
INSERT INTO PEDIDOS p VALUES (SQ_PED.NEXTVAL, SYSDATE, 79);
INSERT INTO PEDIDOS p VALUES (SQ_PED.NEXTVAL, SYSDATE, 100);



-- CASO PRUEBA --

INSERT INTO PEDIDOS p VALUES(300, SYSDATE, 8000); -- SE CREARA CON ID_PEDIDO = 300
INSERT INTO LINEAS_PEDIDO lp VALUES(SQ_LIN.NEXTVAL, 300, 2, 2); -- SE CREA LA LINEA DE PEDIDO PARA ESE PEDIDO

SELECT * FROM LOG_AUDITORIA la ; --AQUI DEBE APARECER EL ID_PEDIDO 300, CON OPERACION INSERT
SELECT * FROM PEDIDOS p2; --AQUI COMPROBAMOS EL VALOR DEL TOTAL_PEDIDO INTRODUCIDO

UPDATE PEDIDOS P
SET TOTAL_PEDIDO = 8750
WHERE P.ID_PEDIDO = 300;
--AQUI SE ACTUALIZA EL TOTAL_PEDIDO A 8750 EN EL PEDIDO QUE ACABAMOS DE AÑADIR

SELECT * FROM PEDIDOS p ; --UNA VEZ ACTUALIZADO SE COMPRUEBA QUE EL TOTAL_PEDIDO SE HA ACTUALIZADO 
SELECT * FROM LOG_AUDITORIA la ; -- Y SE COMPRUEBA QUE LA OPERACIÓN HA CAMBIADO A UPDATE

DELETE FROM LINEAS_PEDIDO lp WHERE LP.ID_PEDIDO = 300;
DELETE FROM PEDIDOS p WHERE P.ID_PEDIDO = 300; -- AL HACER DELETE EN LA TABLA LOG_AUDITORIA APARECE COMO DELETE, SIENDO ESTA LA ULTIMA OPERACION REALIZADA
SELECT * FROM LOG_AUDITORIA la ;


-----------------------------------------------------------------------------------------------
---------------------------------------EJERCICIO 3 --------------------------------------------


CREATE OR REPLACE TRIGGER RECUPERACIONEXAMEN.VALIDAR_PRECIOS
BEFORE INSERT OR UPDATE OF PRECIO ON PRODUCTOS
FOR EACH ROW
BEGIN
	
	IF INSERTING THEN
		
		IF (:NEW.PRECIO) <= 0 THEN
			RAISE_APPLICATION_ERROR(-20001, 'EL PRECIO DEL PRODUCTO NO PUEDE SER MENOR O IGUAL A 0');
		ELSE
			DBMS_OUTPUT.PUT_LINE('INSERTADO CON ÉXITO');
		END IF;

	ELSIF UPDATING THEN
	
		IF (:NEW.PRECIO) <= 0 THEN
			RAISE_APPLICATION_ERROR(-20002, 'EL PRECIO DEL PRODUCTO NO PUEDE SER MENOR O IGUAL A 0');
		ELSE
			DBMS_OUTPUT.PUT_LINE('ACTUALIZADO CON ÉXITO');
		END IF;
	
	END IF;
	
END;

--INSERTS DE PRUEBA PARA EL TRIGGER

INSERT INTO PRODUCTOS p VALUES(200, 'LAVADORA', 0.00, 45);  -- SALTA EL ERROR YA QUE EL PRECIO ES IGUAL A 0
INSERT INTO PRODUCTOS p VALUES(300, 'PALA DE PADEL', 85.50, 15); -- SE INSERTA CORRECTAMENTE 
INSERT INTO PRODUCTOS p VALUES(400, 'BOLAS DE PADEL', -5.50, 15); -- SALTA EL ERROR DEBIDO A QUE EL PRECIO ES NEGATIVO

DELETE FROM PRODUCTOS p WHERE P.ID_PRODUCTO = 300;

SELECT * FROM PRODUCTOS p ;
 




































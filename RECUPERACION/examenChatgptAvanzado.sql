----------------------------------------------
--------------- EJERCICIO 1 ------------------
----------------------------------------------

--CON FOR
DECLARE
	CURSOR C_EMPS_PENDIENTES IS
	SELECT E.NOMBRE FROM EMPLEADOS E
	JOIN TAREAS t ON T.ID_ASIGNADO_A = E.ID_EMPLEADO
	WHERE T.ESTADO LIKE 'PENDIENTE';

BEGIN
	
	FOR C IN C_EMPS_PENDIENTES LOOP
		
		DBMS_OUTPUT.PUT_LINE('EL EMPLEADO '|| C.NOMBRE || ' TIENE UNA TAREA PENDIENTE.');
		
	END LOOP;
	
	
END;


--CON FETCH
DECLARE
	CURSOR C_EMPS_PENDIENTES IS
	SELECT E.NOMBRE FROM EMPLEADOS E
	JOIN TAREAS t ON T.ID_ASIGNADO_A = E.ID_EMPLEADO
	WHERE T.ESTADO LIKE 'PENDIENTE';

	V_EMPS C_EMPS_PENDIENTES%ROWTYPE;

BEGIN
	
	OPEN C_EMPS_PENDIENTES;
	LOOP
		
		FETCH C_EMPS_PENDIENTES INTO V_EMPS;
		EXIT WHEN C_EMPS_PENDIENTES%NOTFOUND;
		
		DBMS_OUTPUT.PUT_LINE('EL EMPLEADO '|| V_EMPS.NOMBRE || ' TIENE UNA TAREA PENDIENTE.');
		
	END LOOP;
	CLOSE C_EMPS_PENDIENTES;
	
END;

----------------------------------------------
--------------- EJERCICIO 2 ------------------
----------------------------------------------


CREATE OR REPLACE FUNCTION NUM_TAREAS_EMPLEADO (P_IDEMP IN EMPLEADOS.ID_EMPLEADO%TYPE) 
RETURN NUMBER
IS
	V_NUMTAREAS NUMBER(10);
BEGIN
	
	SELECT COUNT(*)
	INTO V_NUMTAREAS
	FROM EMPLEADOS E
	JOIN TAREAS T ON T.ID_ASIGNADO_A = E.ID_EMPLEADO
	WHERE E.ID_EMPLEADO = P_IDEMP;
	
	RETURN V_NUMTAREAS;
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('ERROR');
END;

--PRUEBAS

SELECT NUM_TAREAS_EMPLEADO(2) FROM DUAL;


----------------------------------------------
--------------- EJERCICIO 3 ------------------
----------------------------------------------

CREATE SEQUENCE SQ_LOG
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE FINALIZAR_TAREA (P_IDTAREA IN TAREAS.ID_TAREA%TYPE)
IS
BEGIN
	
	UPDATE TAREAS SET ESTADO = 'COMPLETADA'
	WHERE ID_TAREA = P_IDTAREA;
	
	IF SQL%ROWCOUNT = 0 THEN
		RAISE NO_DATA_FOUND;
	END IF;
	
	INSERT INTO LOG_ACCIONES
	VALUES(SQ_LOG.NEXTVAL, 'FINALIZAR_TAREA', 'TAREAS', P_IDTAREA, SYSDATE, USER);
	
END;


--PRUEBAS

--COMPROBAMOS EL ESTADO DE LA TAREA 2
SELECT * FROM TAREAS;

--EJECUTAMOS EL PROCEDURE
BEGIN
	FINALIZAR_TAREA(2);
END;

--EL ESTADO DEBE HABER CAMBIADO A COMPLETADA EN LA TAREA CON ID 2
SELECT * FROM TAREAS;



----------------------------------------------
--------------- EJERCICIO 4 ------------------
----------------------------------------------

CREATE OR REPLACE TRIGGER T_BLOQUEAR_BAJAS
BEFORE DELETE ON PROYECTOS
FOR EACH ROW
DECLARE
    V_NUMTAREAS NUMBER(10);
BEGIN
    SELECT COUNT(*)
    INTO V_NUMTAREAS
    FROM TAREAS
    WHERE ID_PROYECTO = :OLD.ID_PROYECTO;

    IF V_NUMTAREAS > 0 THEN
        RAISE_APPLICATION_ERROR(-20010, 'NO SE PUEDE BORRAR UN PROYECTO QUE TIENE TAREAS ASOCIADAS.');
    END IF;
END;



DELETE FROM PROYECTOS WHERE ID_PROYECTO = 1;


UPDATE TAREAS SET ID_PROYECTO = 2
WHERE ID_TAREA = 1;


SELECT * FROM TAREAS;



----------------------------------------------
--------------- EJERCICIO 5 ------------------
----------------------------------------------


CREATE SEQUENCE SEQ_TAREAS START WITH 100 INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE ASIGNAR_TAREA (
    P_IDPROYECTO   IN  PROYECTOS.ID_PROYECTO%TYPE,
    P_DESCRIPCION  IN  VARCHAR2,
    P_FECHA_LIMITE IN  DATE,
    P_IDEMP_ASIG   IN  TAREAS.ID_ASIGNADO_A%TYPE,
    P_IDTAREA      OUT TAREAS.ID_TAREA%TYPE
)
IS
BEGIN
    P_IDTAREA := SEQ_TAREAS.NEXTVAL;

    INSERT INTO TAREAS (
        ID_TAREA, DESCRIPCION, ID_PROYECTO, ID_ASIGNADO_A, ESTADO, FECHA_LIMITE
    )
    VALUES (
        P_IDTAREA, P_DESCRIPCION, P_IDPROYECTO, P_IDEMP_ASIG, 'PENDIENTE', P_FECHA_LIMITE
    );
    
    COMMIT;
END;


--PRUEBAS

--COMPROBAMOS QUE NO EXISTA YA LA TAREA
SELECT * FROM TAREAS;

--EJECUTAMOS EL PROCEDURE PARA CREARLA
DECLARE
    V_IDTAREA TAREAS.ID_TAREA%TYPE;
BEGIN
    ASIGNAR_TAREA(8, 'HOLA', SYSDATE, 2, V_IDTAREA);
    DBMS_OUTPUT.PUT_LINE('TAREA CREADA CON ID: ' || V_IDTAREA);
END;


--COMPROBAMOS QUE SE HA CREADO UNA NUEVA TAREA
SELECT * FROM TAREAS;


----------------------------------------------
--------------- EJERCICIO 6 ------------------
----------------------------------------------


CREATE OR REPLACE FUNCTION PORCENTAJE_COMPLETADO_PROYECTO (
    P_IDPROYECTO IN PROYECTOS.ID_PROYECTO%TYPE
) RETURN NUMBER
IS
    V_TOTALTAREAS   NUMBER := 0;
    V_COMPLETADAS   NUMBER := 0;
    V_RESULTADO     NUMBER := 0;
BEGIN
    -- Contar total de tareas del proyecto
    SELECT COUNT(*) INTO V_TOTALTAREAS
    FROM TAREAS
    WHERE ID_PROYECTO = P_IDPROYECTO;

    IF V_TOTALTAREAS = 0 THEN
        RETURN 0;
    END IF;

    -- Contar tareas completadas del proyecto
    SELECT COUNT(*) INTO V_COMPLETADAS
    FROM TAREAS
    WHERE ID_PROYECTO = P_IDPROYECTO AND ESTADO = 'COMPLETADA';

    V_RESULTADO := (V_COMPLETADAS * 100) / V_TOTALTAREAS;

    RETURN V_RESULTADO;

EXCEPTION
    WHEN OTHERS THEN
        RETURN -1;
END;










































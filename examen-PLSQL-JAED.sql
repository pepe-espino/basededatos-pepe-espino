alter session set "_oracle_script"=true;  
create user recuperacionExamen identified by recuperacionExamen;
GRANT CONNECT, RESOURCE, DBA TO recuperacionExamen;

--------------------------------------------------------
----------------------EJERCICIO1------------------------

CREATE TABLE PEDIDOS
(
	ID_PEDIDO NUMBER(10),
	FECHA_PEDIDO DATE,
	TOTAL_PEDIDO NUMBER(10,2),
	CONSTRAINT PK_PEDIDOS PRIMARY KEY(ID_PEDIDO)
);

CREATE TABLE PRODUCTOS
(
	ID_PRODUCTO NUMBER(10),
	NOMBRE VARCHAR2(50),
	PRECIO NUMBER(10,2),
	STOCK NUMBER(10),
	CONSTRAINT PK_PRODUCTOS PRIMARY KEY(ID_PRODUCTO)
);

CREATE TABLE LINEAS_PEDIDO
(
	ID_LINEA NUMBER(10),
	ID_PEDIDO NUMBER(10),
	ID_PRODUCTO NUMBER(10),
	CANTIDAD NUMBER(10),
	CONSTRAINT PK_LINEAS_PEDIDO PRIMARY KEY(ID_LINEA),
	CONSTRAINT FK1_LP FOREIGN KEY(ID_PEDIDO) REFERENCES PEDIDOS(ID_PEDIDO),
	CONSTRAINT FK2_LP FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO)
);


--INSERTS

SELECT * FROM PEDIDOS p ;
SELECT * FROM PRODUCTOS p2;
SELECT * FROM LINEAS_PEDIDO lp ;

INSERT INTO PEDIDOS p VALUES (1, SYSDATE, 50);
INSERT INTO PEDIDOS p VALUES (2, SYSDATE, 35.65);
INSERT INTO PEDIDOS p VALUES (3, SYSDATE, 79.99);

INSERT INTO PRODUCTOS p VALUES (1, 'ORDENADOR', 500.50, 15);
INSERT INTO PRODUCTOS p VALUES (2, 'MESA', 62.75, 25);
INSERT INTO PRODUCTOS p VALUES (3, 'RATÓN', 29.99, 60);
INSERT INTO PRODUCTOS p VALUES (4, 'TECLADO', 72, 60);
INSERT INTO PRODUCTOS p VALUES (5, 'MONITOR', 124.99, 18);

INSERT INTO LINEAS_PEDIDO lp VALUES(1, 1, 3, 4);
INSERT INTO LINEAS_PEDIDO lp VALUES(2, 2, 4, 2);
INSERT INTO LINEAS_PEDIDO lp VALUES(3, 3, 1, 1);


CREATE OR REPLACE PROCEDURE PROCESAR_PEDIDO 
IS 
	CURSOR C_LP IS 
	SELECT * FROM LINEA_PEDIDO;

	V_PRODUCTO
BEGIN
	
	FOR C IN C_LP LOOP
		
		IF (SELECT P.STOCK FROM PRODUCTOS p WHERE P.ID_PRODUCTO = C.ID_PRODUCTO) < C.CANTIDAD THEN
			RAISE_APPLICATION_ERROR(-20005, 'EL STOCK DEL PRODUCTO ES MENOR QUE LA CANTIDAD A COMPRAR');
		END IF;
		
	END LOOP;


END;


----------------------------------------------
--------------EJERCICIO 2---------------------

-- creación de la tabla log_auditoria

CREATE TABLE LOG_AUDITORIA
(
	ID_LOG NUMBER(10),
	TABLA_AFECTADA VARCHAR2(25),
	OPERACION VARCHAR2(25),
	FECHA_EVENTO DATE,
	ID_PEDIDO NUMBER(10),
	CONSTRAINT PK_LOG_AUDITORIA PRIMARY KEY(ID_LOG),
	CONSTRAINT FK_LOG_AUD FOREIGN KEY(ID_PEDIDO) REFERENCES PEDIDOS(ID_PEDIDO)
);



CREATE OR REPLACE TRIGGER PEDIDOS_ESPINOJOSEANTONIO.AUDITAR_PEDIDOS
AFTER INSERT OR DELETE OR UPDATE ON PEDIDOS
FOR EACH ROW 
BEGIN 
	
	IF INSERTING THEN
		
		INSERT INTO LOG_AUDITORIA la VALUES((SELECT COUNT(*)+1 FROM LOG_AUDITORIA), 'PEDIDOS', 'INSERT', SYSDATE, :NEW.ID_PEDIDO);
	
	ELSIF UPDATING THEN
	
		UPDATE LOG_AUDITORIA SET ID_LOG = (SELECT COUNT(*)+1 FROM LOG_AUDITORIA), TABLA_AFECTADA = TABLA_AFECTADA , OPERACION = 'UPDATE', FECHA_EVENTO = SYSDATE, ID_PEDIDO = :NEW.ID_PEDIDO;   
		
	ELSE
	
		DELETE FROM LOG_AUDITORIA la WHERE LA.ID_PEDIDO = :OLD.ID_PEDIDO;
		
	END IF;
	
END;


INSERT INTO PEDIDOS p VALUES (4, SYSDATE, 134.99);
INSERT INTO PEDIDOS p VALUES (5, SYSDATE, 4.55);
INSERT INTO PEDIDOS p VALUES (8, SYSDATE, 78.55);

UPDATE PEDIDOS
SET TOTAL_PEDIDO = 80.99
WHERE ID_PEDIDO = 8;

DELETE FROM PEDIDOS p WHERE id_pedido = 8;

SELECT * FROM LOG_AUDITORIA la ;
SELECT * FROM PEDIDOS p WHERE ID_PEDIDO = 8;



----------------------------------------------------------------------
----------------------- EJERCICIO 3 ----------------------------------


CREATE OR REPLACE TRIGGER VALIDAR_PRECIOS
BEFORE INSERT OR UPDATE OF PRECIO ON PRODUCTOS
FOR EACH ROW
BEGIN
	
	IF INSERTING THEN
		
		IF (:NEW.PRECIO) <= 0 THEN
			RAISE_APPLICATION_ERROR(-20001, 'EL PRECIO DEL PRODUCTO NO PUEDE SER MENOR O IGUAL A 0');
		END IF;

	IF UPDATING THEN
	
		IF (:NEW.PRECIO) <= 0 THEN
			RAISE_APPLICATION_ERROR(-20002, 'EL PRECIO DEL PRODUCTO NO PUEDE SER MENOR O IGUAL A 0');
		
	END IF
	
END;


--INSERTS DE PRUEBA PARA EL TRIGGER

/*
INSERT INTO PRODUCTOS p VALUES(6, 'LAVADORA', 0.00, 45);
INSERT INTO PRODUCTOS p VALUES(7, 'PALA DE PADEL', -85.50, 15);
*/



------------------------------------------------------------------
------------------------ EJERCICIO 4 -----------------------------


CREATE OR REPLACE PROCEDURE AJUSTAR_PRECIO_PRODUCTO(P_ID_PRODUCTO IN NUMBER, P_PORCENTAJE IN NUMBER)
IS 
	V_EXISTE_PRODUCTO NUMBER;
	V_PRECIO_SIN_CAMBIO NUMBER;
	V_CAMBIO_PRECIO NUMBER;
	V_PRECIO_NUEVO NUMBER;
BEGIN 
	V_EXISTE_PRODUCTO:=0;
	
	SELECT COUNT(*) INTO V_EXISTE_PRODUCTO FROM PRODUCTOS p
	WHERE ID_PRODUCTO = P_ID_PRODUCTO;

	SELECT P.PRECIO INTO V_PRECIO_SIN_CAMBIO FROM PRODUCTOS p 
	WHERE ID_PRODUCTO = P_ID_PRODUCTO;

	V_CAMBIO_PRECIO := V_PRECIO_SIN_CAMBIO*(P_PORCENTAJE/100);
	V_PRECIO_NUEVO := V_PRECIO_SIN_CAMBIO-V_CAMBIO_PRECIO;
	
	IF V_EXISTE_PRODUCTO <=0 THEN
		RAISE_APPLICATION_ERROR(-20003, 'EL PRODUCTO NO EXISTE.');
	
	ELSE
	
		UPDATE PRODUCTOS
		SET PRECIO = V_PRECIO_NUEVO
		WHERE ID_PRODUCTO = P_ID_PRODUCTO;
	
	END IF;
	
	DBMS_OUTPUT.PUT_LINE('EL PRODUCTO CON ID: '|| P_ID_PRODUCTO|| ' , HA CAMBIADO DE PRECIO A: '||V_PRECIO_NUEVO);
	
END;

BEGIN
	AJUSTAR_PRECIO_PRODUCTO(1, 20);
END;



